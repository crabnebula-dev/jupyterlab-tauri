name: Release binary packages

on:
  workflow_dispatch:

jobs:
  create_release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create_release.outputs.id }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "lts/*"

      - name: Get version
        id: get_version
        run: echo "PACKAGE_VERSION=$(node -p "require('./src-tauri/tauri.conf.json').package.version")" >> $GITHUB_OUTPUT

      - name: Create release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          body: '*This release was generated automatically using GitHub Actions.*'
          draft: true
          name: ${{ steps.get_version.outputs.PACKAGE_VERSION }}
          token: ${{ secrets.GITHUB_TOKEN }}          

  create_packages:
    needs: create_release
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        cfg:
          - { os: ubuntu-20.04, conda_installer_url: "https://repo.anaconda.com/miniconda/Miniconda3-py38_22.11.1-1-Linux-x86_64.sh" }
          - { os: macos-latest, conda_installer_url: "https://repo.anaconda.com/miniconda/Miniconda3-py39_22.11.1-1-MacOSX-arm64.sh" }
          - { os: windows-latest, conda_installer_url: "https://repo.anaconda.com/miniconda/Miniconda3-py39_22.11.1-1-Windows-x86_64.exe" }

    runs-on: ${{ matrix.cfg.os }}

    defaults:
      run:
        # needed for conda to work
        shell: bash -el {0}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Rust cache
        uses: Swatinem/rust-cache@v2

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "lts/*"
          cache-dependency-path: v2/package-lock.json

      - name: Install apt dependencies (ubuntu only)
        if: matrix.cfg.os == 'ubuntu-20.04'
        run: |
          sudo apt-get update
          sudo apt install -y --no-install-recommends  webkit2gtk-4.0

      - name: install conda
        uses: conda-incubator/setup-miniconda@v3
        with:
          installer-url: ${{ matrix.conda_installer_url }}
          auto-update-conda: true
          auto-activate-base: true
          activate-environment: ""
          channels: conda-forge

      - name: install constructor
        run: |
          conda install -c conda-forge constructor
          constructor -h

      #- name: downgrade pillow (Windows only)
      #  if: matrix.cfg.os == 'windows-latest'
      #  run: conda install -c conda-forge pillow=9.0.0

      - name: Install frontend dependencies
        run: yarn install

      - name: Build front-end
        run: yarn build

      - name: Setup api key file
        if: matrix.cfg.os == 'macos-latest'
        run: mkdir src-tauri/private_keys && echo "${{ secrets.APPLE_API_KEY }}" > src-tauri/private_keys/AuthKey.p8

      - name: Build the app
        run: yarn tauri build -vvv
        env:
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE_BASE64 }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_API_ISSUER: ${{ secrets.APPLE_API_ISSUER }}
          APPLE_API_KEY: ${{ secrets.APPLE_API_KEY_ID }}
          APPLE_API_KEY_PATH: "private_keys/AuthKey.p8"

      - name: Remove api key file
        if: matrix.cfg.os == 'macos-latest'
        run: rm src-tauri/private_keys/AuthKey.p8

      - name: Find release binary
        id: find_release_binary
        run: |
          node -p "(f=>f.writeFileSync(process.env.GITHUB_OUTPUT,'FILENAME='+f.readdirSync('./src-tauri/target/release').find(n=>/\.deb$|\.appimage$|\.dmg$|-setup\.exe$/i.test(n))))(require('fs'))"

      - name: Upload binary to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: src-tauri/target/release/${{ steps.find_release_binary.outputs.FILENAME }}
          asset_name: ${{ steps.find_release_binary.outputs.FILENAME }}
          asset_content_type: application/octet-stream

  publish-release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    needs: [create_release, create_packages]

    steps:
      - name: Publish release
        id: publish-release
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: `${{ needs.create_release.outputs.release_id }}`,
              draft: false,
              prerelease: false
            })